/**
 * @DESCRIPTION       : TEST CLASS FOR INSTANCEDETAILCONTROLLERLWC
 * @AUTHOR            : FRAN MEJÍAS
 * @GROUP             : 
 * @LAST MODIFIED ON  : 22-06-2023
 * @LAST MODIFIED BY  : FRAN MEJÍAS
 * MODIFICATIONS LOG 
 * VER   DATE         AUTHOR   MODIFICATION
 * 1.0   22-06-2023   FRAN MEJÍAS   INITIAL VERSION
**/
@ISTEST
PUBLIC WITH SHARING CLASS INSTANCEDETAILCONTROLLERLWCTEST {

    @ISTEST
    STATIC VOID EXECUTESCANTEST(){

        INSTANCE__C MYINSTANCE = NEW INSTANCE__C(URL__C='URL', DESCRIPTION__C='DEC', ENVIRONMENT_TYPE__C='DEV',ID__C= '1', INSTANCE_TYPE__C='SALESFORCCE', IS_FEATURED_BANCH__C=TRUE);

        INSERT MYINSTANCE;

        STATICRESOURCECALLOUTMOCK MOCK = NEW STATICRESOURCECALLOUTMOCK();
        MOCK.SETSTATICRESOURCE('SCANOK');
        MOCK.SETSTATUSCODE(202);
        MOCK.SETHEADER('CONTENT-TYPE', 'APPLICATION/JSON');

        // SET THE MOCK CALLOUT MODE
        TEST.SETMOCK(HTTPCALLOUTMOCK.CLASS, MOCK);
        TEST.STARTTEST();
        MAP<STRING,OBJECT> RESPONSE = NEW MAP<STRING,OBJECT>();
        RESPONSE = INSTANCEDETAILCONTROLLERLWC.EXECUTESCAN(MYINSTANCE.ID, '1', 'DUMMY'); 
        TEST.STOPTEST();

        SYSTEM.ASSERTEQUALS('OK', RESPONSE.GET('ISSUCCESS'));
        SYSTEM.ASSERTEQUALS('SCAN LAUNCHED.', RESPONSE.GET('MESSAGE'));
        SYSTEM.ASSERTEQUALS([SELECT ID FROM SCANN__C].SIZE(), 1);

    } 

    @ISTEST
    STATIC VOID EXECUTESCANDELAYTEST(){

        INSTANCE__C MYINSTANCE = NEW INSTANCE__C(URL__C='URL', DESCRIPTION__C='DEC', ENVIRONMENT_TYPE__C='DEV',ID__C= '1', INSTANCE_TYPE__C='SALESFORCCE', IS_FEATURED_BANCH__C=TRUE);

        INSERT MYINSTANCE;

        INSERT NEW SCANN__C(DATE__C = DATE.TODAY(), STATE__C = 'RUNNING', ID__C = '1', SCAN_TYPE__C = 'FEATURE-BRANCH-SCAN', BRANCH_NAME__C = 'DUMMY', INSTANCE__C = MYINSTANCE.ID) ;
        
        QUALITYCLOUDSSETTINGS__MDT SETTINGS = CONTROLLERHELPERQC.GETSETTINGS();

        MULTISTATICRESOURCECALLOUTMOCK MULTIMOCK = NEW MULTISTATICRESOURCECALLOUTMOCK();
        MULTIMOCK.SETSTATICRESOURCE(SETTINGS.API_ENDPOINT__C + '/API/'  + SETTINGS.API_VERSION__C + '/FEATURE-BRANCH-SCAN/1','SCANDELAY');
        MULTIMOCK.SETSTATICRESOURCE(SETTINGS.API_ENDPOINT__C + '/API/'  + SETTINGS.API_VERSION__C + '/FEATURE-BRANCH-ISSUE?FILTER[SCAN_UUID]=1&PAGE[SIZE]=1000&PAGE[NUMBER]=1', 'ISSUELISTOK');
        MULTIMOCK.SETSTATUSCODE(200);

        // SET THE MOCK CALLOUT MODE
        TEST.SETMOCK(HTTPCALLOUTMOCK.CLASS, MULTIMOCK);
        TEST.STARTTEST();
        MAP<STRING,OBJECT> RESPONSE = NEW MAP<STRING,OBJECT>();
        RESPONSE = INSTANCEDETAILCONTROLLERLWC.EXECUTESCAN(MYINSTANCE.ID, '1', 'DUMMY'); 
        TEST.STOPTEST();

        SYSTEM.ASSERTEQUALS('WARN', RESPONSE.GET('ISSUCCESS'));
        SYSTEM.ASSERTEQUALS('THERE ARE TO MANY SCANS RUNNING ON THE SAME BRANCH, PLEASE TRY AGAIN LATER.', RESPONSE.GET('MESSAGE'));
        SYSTEM.ASSERTEQUALS([SELECT ID FROM SCANN__C].SIZE(), 1);

    } 

    @ISTEST
    STATIC VOID EXECUTESCANERRORTEST(){

        INSTANCE__C MYINSTANCE = NEW INSTANCE__C(URL__C='URL', DESCRIPTION__C='DEC', ENVIRONMENT_TYPE__C='DEV',ID__C= '1', INSTANCE_TYPE__C='SALESFORCCE', IS_FEATURED_BANCH__C=TRUE);

        INSERT MYINSTANCE;
 
        STATICRESOURCECALLOUTMOCK MOCK = NEW STATICRESOURCECALLOUTMOCK();
        MOCK.SETSTATICRESOURCE('SCANOK');
        MOCK.SETSTATUSCODE(203);
        MOCK.SETHEADER('CONTENT-TYPE', 'APPLICATION/JSON');

        // SET THE MOCK CALLOUT MODE
        TEST.SETMOCK(HTTPCALLOUTMOCK.CLASS, MOCK);
        TEST.STARTTEST();
        MAP<STRING,OBJECT> RESPONSE = NEW MAP<STRING,OBJECT>();
        RESPONSE = INSTANCEDETAILCONTROLLERLWC.EXECUTESCAN(MYINSTANCE.ID, '1', 'DUMMY'); 
        TEST.STOPTEST();

        SYSTEM.ASSERTEQUALS('ERR', RESPONSE.GET('ISSUCCESS'));
        SYSTEM.ASSERTEQUALS('WE COULD NOT RUN THE SCAN. PLEASE CONTACT YOUR ADMINISTRATOR.', RESPONSE.GET('MESSAGE'));
        SYSTEM.ASSERTEQUALS([SELECT ID FROM SCANN__C].SIZE(), 0);

    } 

    @ISTEST
    STATIC VOID GETSCANSTEST(){

        INSTANCE__C MYINSTANCE = NEW INSTANCE__C(URL__C='URL', DESCRIPTION__C='DEC', ENVIRONMENT_TYPE__C='DEV',ID__C= '1', INSTANCE_TYPE__C='SALESFORCCE', IS_FEATURED_BANCH__C=TRUE);

        INSERT MYINSTANCE;
SYSTEM.DEBUG('1');
      INSERT NEW SCANN__C(DATE__C = DATE.TODAY(), STATE__C = 'RUNNING', ID__C = '1', SCAN_TYPE__C = 'FEATURE-BRANCH-SCAN', BRANCH_NAME__C = 'DUMMY', INSTANCE__C = MYINSTANCE.ID) ;
      QUALITYCLOUDSSETTINGS__MDT SETTINGS = CONTROLLERHELPERQC.GETSETTINGS();

      MULTISTATICRESOURCECALLOUTMOCK MULTIMOCK = NEW MULTISTATICRESOURCECALLOUTMOCK();
      MULTIMOCK.SETSTATICRESOURCE(SETTINGS.API_ENDPOINT__C + '/API/'  + SETTINGS.API_VERSION__C + '/FEATURE-BRANCH-SCAN/1','SCANOK');
      MULTIMOCK.SETSTATICRESOURCE(SETTINGS.API_ENDPOINT__C + '/API/'  + SETTINGS.API_VERSION__C + '/FEATURE-BRANCH-ISSUE?FILTER[SCAN_UUID]=1&PAGE[SIZE]=1000&PAGE[NUMBER]=1', 'ISSUELISTOK');
      MULTIMOCK.SETSTATUSCODE(200);

      // SET THE MULTIMOCK CALLOUT MODE
      TEST.SETMOCK(HTTPCALLOUTMOCK.CLASS, MULTIMOCK);

        SYSTEM.DEBUG('2');
        
        TEST.STARTTEST();

        LIST<INSTANCEDETAILCONTROLLERLWC.SCANWRAPPER> SCANS = NEW LIST<INSTANCEDETAILCONTROLLERLWC.SCANWRAPPER>();
        SYSTEM.DEBUG('3');
        SCANS = INSTANCEDETAILCONTROLLERLWC.GETSCANS(MYINSTANCE.ID); 
        SYSTEM.DEBUG('4');
        TEST.STOPTEST();
        SYSTEM.ASSERTEQUALS(SCANS.SIZE(), 1);
    } 
}