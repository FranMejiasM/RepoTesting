/**
 * @DESCRIPTION       : CONTROLLER CLASS FOR LWC INSTANCE DETAIL
 * @AUTHOR            : FRAN MEJÍAS
 * @GROUP             : 
 * @LAST MODIFIED ON  : 20-06-2023
 * @LAST MODIFIED BY  : FRAN MEJÍAS
 * MODIFICATIONS LOG 
 * VER   DATE         AUTHOR   MODIFICATION
 * 1.0   20-06-2023   FRAN MEJÍAS   INITIAL VERSION
**/
PUBLIC WITH SHARING CLASS INSTANCEDETAILCONTROLLERLWC {
    
    /**
    * @DESCRIPTION EXECUTE A SCAN FOR A BRANCH
    */
    @AURAENABLED
    PUBLIC STATIC MAP<STRING,OBJECT> EXECUTESCAN(STRING INSTANCEID, STRING IDC, STRING GITBRANCH) {
        MAP<STRING,OBJECT> RESPONSE = NEW MAP<STRING,OBJECT>();
        STRING RESULT;
       INSTANCE__C INSTANCE = NEW INSTANCE__C(ID = INSTANCEID, ID__C = IDC);

        TRY {
            GLOBALCALLSTOQC EXEC = NEW GLOBALCALLSTOQC();
            RESULT = EXEC.EXECUTE_SCANN(INSTANCE, GITBRANCH, TRUE);

            SWITCH ON RESULT {
                WHEN 'SUCCESS' {
                    RESPONSE.PUT('ISSUCCESS', 'OK');
                    RESPONSE.PUT('MESSAGE', 'SCAN LAUNCHED.');
                }
                WHEN 'DELAY' {
                    RESPONSE.PUT('ISSUCCESS', 'WARN');
                    RESPONSE.PUT('MESSAGE', 'THERE ARE TO MANY SCANS RUNNING ON THE SAME BRANCH, PLEASE TRY AGAIN LATER.');
                }
                WHEN ELSE {
                    RESPONSE.PUT('ISSUCCESS', 'ERR');
                    RESPONSE.PUT('MESSAGE', 'WE COULD NOT RUN THE SCAN. PLEASE CONTACT YOUR ADMINISTRATOR.');
                }
            }
        }
        CATCH(EXCEPTION E) {
            THROW NEWEXCEPTION(E.GETMESSAGE());
        }           
        RETURN RESPONSE;
    }

        /**
    * @DESCRIPTION RETRIEVE ALL THE SCANS RELATED TO AN INSTANCE
    */
    @AURAENABLED
    PUBLIC STATIC LIST<SCANWRAPPER> GETSCANS(STRING INSTANCEID) {
        LIST<SCANWRAPPER> RESULT = NEW LIST<SCANWRAPPER>();
        FOR(SCANN__C SCAN : [SELECT ID, DATE__C, STATE__C, BRANCH_NAME__C FROM SCANN__C WHERE INSTANCE__C = :INSTANCEID ORDER BY DATE__C DESC]) {
            SCANWRAPPER WRAP = NEW SCANWRAPPER();

            WRAP.SCANDATE = SCAN.DATE__C.FORMAT();
            WRAP.BRANCH = SCAN.BRANCH_NAME__C;
            WRAP.SCANID = SCAN.ID;
            WRAP.STATE = SCAN.STATE__C;
            RESULT.ADD(WRAP);
        }            
        RETURN RESULT;
    }

    /**
    * @DESCRIPTION RETRIEVE IDC FROM THE INSTANCE
    */
    @AURAENABLED
    PUBLIC STATIC STRING GETINSTANCEID(ID INSTANCEID) {
        STRING RESPONSE = NULL; 
        
        LIST<INSTANCE__C> INSTANCE = [SELECT ID__C FROM INSTANCE__C WHERE ID = :INSTANCEID LIMIT 1]; 

        IF (!INSTANCE.ISEMPTY()) {
          RESPONSE = INSTANCE[0].ID__C; 
        } 
        RETURN RESPONSE;
    }

    /**
    * @DESCRIPTION RETRIEVE NAMESPACE OF THE ORG
    */
    @AURAENABLED
    PUBLIC STATIC STRING GETNAMESPACEORG() {
        
        STRING RESPONSE = [SELECT NAMESPACEPREFIX FROM ORGANIZATION].NAMESPACEPREFIX;
        
        RETURN RESPONSE;
    }

    PRIVATE STATIC AURAHANDLEDEXCEPTION NEWEXCEPTION(STRING MESSAGE) {
        AURAHANDLEDEXCEPTION E = NEW AURAHANDLEDEXCEPTION(MESSAGE);
        E.SETMESSAGE(MESSAGE);
        RETURN E;
    }        

    PUBLIC CLASS SCANWRAPPER {
        @AURAENABLED PUBLIC STRING SCANDATE {GET;SET;}
        @AURAENABLED PUBLIC STRING BRANCH {GET;SET;}
        @AURAENABLED PUBLIC STRING STATE {GET;SET;}
        @AURAENABLED PUBLIC STRING SCANID {GET;SET;}
        }
}