/**
 * @DESCRIPTION       : CONTROLLER CLASS FOR LWC INSTANCES
 * @AUTHOR            : FRAN MEJÍAS
 * @GROUP             : 
 * @LAST MODIFIED ON  : 13-06-2023
 * @LAST MODIFIED BY  : FRAN MEJÍAS
 * MODIFICATIONS LOG 
 * VER   DATE         AUTHOR   MODIFICATION
 * 1.0   13-06-2023   FRAN MEJÍAS   INITIAL VERSION
**/
PUBLIC WITH SHARING CLASS INSTANCECONTROLLERLWC {
    FINAL STATIC STRING RS_NAME = 'THIS_ORG_TEMP_URL';
    FINAL STATIC STRING RS_DESCRIPTION = 'TEMPORARY REMOTE SETTING REQUIRED TO USE METADATA API FROM APEX'; 
    FINAL STATIC STRING ORG_URL = URL.GETSALESFORCEBASEURL().TOEXTERNALFORM();      

    @AURAENABLED
    PUBLIC STATIC MAP<STRING,OBJECT> ISCONNECTED() {
        MAP<STRING,OBJECT> RESPONSE = NEW MAP<STRING,OBJECT>();
        BOOLEAN ISCONNECTED = FALSE;
        LIST<QC_USER__C> LISTQCUSER = [SELECT ID, NAME, USER__C, QC_ACTIVE__C, QC_API_KEY_DEVELOPER__C, QC_VALID_UNTIL__C ,API_KEY_1__C, API_KEY_2__C, API_KEY_3__C, API_KEY_4__C, API_KEY_5__C, API_KEY_6__C, API_KEY_7__C
                                        FROM QC_USER__C WHERE USER__C = :USERINFO.GETUSERID() LIMIT 1];
        IF(!LISTQCUSER.ISEMPTY()){
            IF(LISTQCUSER[0].QC_VALID_UNTIL__C != NULL && DATE.TODAY() < LISTQCUSER[0].QC_VALID_UNTIL__C && LISTQCUSER[0].QC_ACTIVE__C){
                ISCONNECTED = TRUE;
            }                
        }ELSE{
            ISCONNECTED = FALSE;
        }
        RESPONSE.PUT('ISCONNECTED', ISCONNECTED);

        IF(ISCONNECTED) {
            RESPONSE.PUT('EXPDATE', LISTQCUSER[0].QC_VALID_UNTIL__C);
        }
        RETURN RESPONSE;
    }

    /**
    * @DESCRIPTION ADD NEW API KEY FOR CONNECTION WHIT QC
    */
    @AURAENABLED
    PUBLIC STATIC MAP<STRING,OBJECT> ADDAPIKEY(STRING APIKEY) {

        MAP<STRING,OBJECT> RESPONSE = NEW MAP<STRING,OBJECT>();
        //SPLIT THE KEY
        LIST<STRING> CHUNKS = NEW LIST<STRING>();
        INTEGER CHUNKSIZE = 175;
        INTEGER NUMCHUNKS = (APIKEY.LENGTH() + CHUNKSIZE - 1) / CHUNKSIZE;
        
        FOR(INTEGER I = 0; I < NUMCHUNKS; I++){
            INTEGER STARTIDX = I * CHUNKSIZE;
            INTEGER ENDIDX = MATH.MIN((I + 1) * CHUNKSIZE, APIKEY.LENGTH());
            CHUNKS.ADD(APIKEY.SUBSTRING(STARTIDX, ENDIDX));
        }
        //CHECK IF ANY OTHER USER USES THE SAME API KEY
        IF(VALIDATEAPIKEY(CHUNKS)){
            TRY {

                HTTPRESPONSE RES = CONTROLLERHELPERQC.ACCESSAPIKEY(APIKEY);
                
                IF (RES != NULL && RES.GETSTATUSCODE() == 200){
                    MAP<STRING, OBJECT> BODY = (MAP<STRING, OBJECT>) JSON.DESERIALIZEUNTYPED(RES.GETBODY());
                    MAP<STRING, OBJECT> DATA = (MAP<STRING, OBJECT>)BODY.GET('DATA');
                    MAP<STRING, OBJECT> ATTRIBUTES= (MAP<STRING, OBJECT>)DATA.GET('ATTRIBUTES');
                    
                    //SAVE DATA IN SALESFORCE USER
                    LIST<QC_USER__C> USERLIST = [SELECT ID, NAME, USER__C, QC_ACTIVE__C, QC_API_KEY_DEVELOPER__C, QC_VALID_UNTIL__C ,API_KEY_1__C, API_KEY_2__C, API_KEY_3__C, API_KEY_4__C, API_KEY_5__C, API_KEY_6__C, API_KEY_7__C
                                                    FROM QC_USER__C  WHERE USER__C =: USERINFO.GETUSERID() LIMIT 1]; 
                    
                    QC_USER__C LOGINUSER = NEW QC_USER__C();
                    
                    IF(!USERLIST.ISEMPTY()){
                        LOGINUSER = USERLIST[0];
                    }ELSE{
                        LOGINUSER.USER__C = USERINFO.GETUSERID();
                        LOGINUSER.NAME = USERINFO.GETNAME();
                    }
                    
                    IF(ATTRIBUTES.GET('VALID-UNTIL') != NULL){
                        LOGINUSER.QC_VALID_UNTIL__C = DATE.VALUEOF(ATTRIBUTES.GET('VALID-UNTIL')+' 00:00:00');
                    }
                    IF(ATTRIBUTES.GET('ACTIVE') != NULL){
                        LOGINUSER.QC_ACTIVE__C = BOOLEAN.VALUEOF(ATTRIBUTES.GET('ACTIVE'));
                    }
                    IF(ATTRIBUTES.GET('API-KEY-DEVELOPER') != NULL){
                        LOGINUSER.QC_API_KEY_DEVELOPER__C = ATTRIBUTES.GET('API-KEY-DEVELOPER').TOSTRING();
                    }
                    
                    LOGINUSER.API_KEY_1__C = CHUNKS[0];
                    LOGINUSER.API_KEY_2__C = CHUNKS[1];
                    LOGINUSER.API_KEY_3__C = CHUNKS[2];
                    LOGINUSER.API_KEY_4__C = CHUNKS[3];
                    LOGINUSER.API_KEY_5__C = CHUNKS[4];
                    LOGINUSER.API_KEY_6__C = CHUNKS[5];
                    IF(CHUNKS.SIZE() > 6){
                        LOGINUSER.API_KEY_7__C = CHUNKS[6];
                    }ELSE{
                        LOGINUSER.API_KEY_7__C = '';
                    }           
        
                    UPSERT LOGINUSER;
                    RESPONSE.PUT('ISSUCCESS', 'OK');
                    RESPONSE.PUT('MESSAGE', 'CONNECTION WITH QUALITY CLOUDS ESTABLISHED');
                    RESPONSE.PUT('EXPDATE', LOGINUSER.QC_VALID_UNTIL__C);
                    
                }ELSE{
                    RESPONSE.PUT('ISSUCCESS', 'KO');
                    RESPONSE.PUT('MESSAGE', 'ERROR CONNECTING WITH QUALITY CLOUDS');
                }
            } CATCH (EXCEPTION E) {
                RESPONSE.PUT('ISSUCCESS', 'KO');
                RESPONSE.PUT('MESSAGE', 'ERROR CONNECTING WITH QUALITY CLOUDS');
            }
        }ELSE{
            RESPONSE.PUT('ISSUCCESS', 'KO');
            RESPONSE.PUT('MESSAGE', 'THIS API KEY IS ALREADY IN USE PLEASE GENERATE A NEW ONE');
        }
        SYSTEM.DEBUG('SALE');       
        SYSTEM.DEBUG('RESPONSE: ' + RESPONSE);  
        RETURN RESPONSE;
    }

    /**
    * @DESCRIPTION VALIDATE THAT THE API KEY IS NOT BEING USED BY OTHER USERS
    */
    PRIVATE STATIC BOOLEAN VALIDATEAPIKEY(LIST<STRING> CHUNKS){
        
        BOOLEAN VALID = TRUE;
        
        LIST<QC_USER__C> USERLIST = [SELECT API_KEY_1__C, API_KEY_2__C, API_KEY_3__C, API_KEY_4__C, API_KEY_5__C, API_KEY_6__C, API_KEY_7__C
                                        FROM QC_USER__C];
        
        IF(!USERLIST.ISEMPTY()){
            FOR ( QC_USER__C QCUSER : USERLIST) {
                IF( QCUSER.API_KEY_1__C == CHUNKS[0]&& QCUSER.API_KEY_2__C == CHUNKS[1] && QCUSER.API_KEY_3__C == CHUNKS[2] && QCUSER.API_KEY_4__C == CHUNKS[3] & QCUSER.API_KEY_5__C == CHUNKS[4] & QCUSER.API_KEY_6__C == CHUNKS[5]){
                    IF(CHUNKS.SIZE() > 6){
                        IF( QCUSER.API_KEY_7__C == CHUNKS[6]){
                            VALID = FALSE;
                        }
                    }ELSE{
                        VALID = FALSE;
                    }
                }
            }
        }
        RETURN VALID;
    }    
        /**
    * @DESCRIPTION RETRIEVE THE INSTANCES OF QUALITYCLOUDS
    */
    @AURAENABLED
    PUBLIC STATIC LIST<INSTANCEWRAPPER> GETINSTANCES(){
        STRING SCAN_SUCCESS = 'POSITION: ABSOLUTE; RIGHT: 0PX; COLOR: GREEN;';
        STRING SCAN_FAILED  = 'POSITION: ABSOLUTE; RIGHT: 0PX; COLOR: RED;';
        STRING NEVER_SCANNED = 'POSITION: ABSOLUTE; RIGHT: 0PX; COLOR: GREY;';

        LIST<INSTANCEWRAPPER> RESULT = NEW LIST<INSTANCEWRAPPER>();

        IF (!SCHEMA.SOBJECTTYPE.INSTANCE__C.ISACCESSIBLE()) {
            THROW NEWEXCEPTION('INSTANCE__C IS NOT ACCESSIBLE FOR CURRENT USER.');
        } 
        FOR(INSTANCE__C INSTANCES : [SELECT ID, URL__C, DESCRIPTION__C, ID__C, (SELECT ID, DATE__C, STATE__C, TOTAL_ISSUES__C FROM SCANNS__R ORDER BY CREATEDDATE DESC LIMIT 1)  FROM INSTANCE__C WHERE IS_FEATURED_BANCH__C = TRUE ORDER BY CREATEDDATE DESC LIMIT 100]) {
            INSTANCEWRAPPER WRAP = NEW INSTANCEWRAPPER();
            WRAP.DESCRIPTION = INSTANCES.DESCRIPTION__C;
            WRAP.URL = INSTANCES.URL__C;
            WRAP.INSTANCEID = INSTANCES.ID;
            WRAP.SCANFAILED = FALSE;
            IF(!INSTANCES.SCANNS__R.ISEMPTY()){                
                SWITCH ON INSTANCES.SCANNS__R[0].STATE__C {
                    WHEN 'RUNNING' {
                        WRAP.SCANSTATUS = 'LAST SCAN IS STILL RUNNING';
                        WRAP.SCANSTYLE = SCAN_SUCCESS;
                    }                    
                    WHEN 'FAIL' {
                        WRAP.SCANSTATUS = 'LAST SCAN FAILED';
                        WRAP.SCANSTYLE = SCAN_FAILED;
                        WRAP.SCANFAILED = TRUE;
                    }
                    WHEN 'SUCCESS' {
                        WRAP.SCANSTATUS = 'LAST SCAN SUCCESSFUL';
                        WRAP.SCANSTYLE = SCAN_SUCCESS;
                    }                
                    WHEN ELSE {
                        WRAP.SCANSTATUS = INSTANCES.SCANNS__R[0].STATE__C;
                    }
                }
                WRAP.SCANDATE = INSTANCES.SCANNS__R[0].DATE__C.FORMAT();
                WRAP.ISSUES = STRING.VALUEOF(INSTANCES.SCANNS__R[0].TOTAL_ISSUES__C);
            } 
            ELSE {
                WRAP.SCANSTATUS = 'TARGET NEVER SCANNED';
                WRAP.SCANDATE = 'NEVER SCANNED';
                WRAP.SCANSTYLE = NEVER_SCANNED;
                WRAP.ISSUES = NULL;
            }
           
            RESULT.ADD(WRAP);
        }            
        IF (RESULT.ISEMPTY()) {
            THROW NEWEXCEPTION('THERE IS NO ANY INSTANCE AVAILABLE.');
        } 
        RETURN RESULT;
    }

    /**
    * @DESCRIPTION UPDATE THE INSTANCES 
    */
    @AURAENABLED
    PUBLIC STATIC MAP<STRING,OBJECT> UPDATEINSTANCES(){
        MAP<STRING,OBJECT> RESPONSE = NEW MAP<STRING,OBJECT>();

        QUALITYCLOUDSSETTINGS__MDT SETTINGS = CONTROLLERHELPERQC.GETSETTINGS();

        IF (!SCHEMA.SOBJECTTYPE.INSTANCE__C.ISUPDATEABLE() || !SCHEMA.SOBJECTTYPE.INSTANCE__C.ISCREATEABLE()) {
            THROW NEWEXCEPTION('CURRENT USER HAS NO CREATE/UPDATE PERMISSION FOR INSTANCE__C OBJECT.');
        }
        HTTPREQUEST REQ = NEW HTTPREQUEST();

        REQ.SETENDPOINT(SETTINGS.API_ENDPOINT__C + '/API/'  + SETTINGS.API_VERSION__C + '/SALESFORCE-INSTANCE');
        REQ.SETMETHOD('GET');
        REQ.SETHEADER('ACCEPT', '*/*');
        REQ.SETHEADER('CLIENT-NAME', 'SALESFORCE');
        REQ.SETHEADER('AUTHORIZATION', 'BEARER '+ CONTROLLERHELPERQC.GETAPIKEY());                
        HTTP HTTP = NEW HTTP();
        HTTPRESPONSE RES = HTTP.SEND(REQ);
        IF (RES.GETSTATUSCODE() == 200){
            JSONINSTANCECONTENT.JSONINSTANCECONTENT_C RESULTS =  JSONINSTANCECONTENT.JSONINSTANCECONTENT_C.PARSE(RES.GETBODY());
            LIST<INSTANCE__C> FETCHED_INSTANCES = NEW LIST<INSTANCE__C>();
            FOR (JSONINSTANCECONTENT.DATA RESULT : RESULTS.DATA) {
                FETCHED_INSTANCES.ADD( NEW INSTANCE__C(URL__C=RESULT.ATTRIBUTES.URL, DESCRIPTION__C=RESULT.ATTRIBUTES.DESCRIPTION, ENVIRONMENT_TYPE__C=RESULT.ATTRIBUTES.ENVIRONMENT,ID__C=RESULT.ID, INSTANCE_TYPE__C=RESULT.ATTRIBUTES.SERVICE_NAME, IS_FEATURED_BANCH__C=RESULT.ATTRIBUTES.IS_FEATURE_BRANCH, INST_ORG_ID__C=RESULT.ATTRIBUTES.ORG_ID));
            }
            IF (FETCHED_INSTANCES?.ISEMPTY()){
                RESPONSE.PUT('ISSUCCESS', 'WARN');
                RESPONSE.PUT('MESSAGE', 'NO INSTANCES FOUND ON THE QUALITY CLOUDS PORTAL FOR THIS ACCOUNT.');
            } ELSE {
                UPSERT FETCHED_INSTANCES ID__C;
                RESPONSE.PUT('ISSUCCESS','OK');
                RESPONSE.PUT('MESSAGE', 'INSTANCES ARE IMPORTED/UPDATED.');                
            }
        } ELSE {
            RESPONSE.PUT('ISSUCCESS','KO');
            RESPONSE.PUT('MESSAGE', RES.GETBODY());
        }
        RETURN RESPONSE;
    }

    PUBLIC CLASS INSTANCEWRAPPER {
        @AURAENABLED PUBLIC STRING DESCRIPTION {GET;SET;}
        @AURAENABLED PUBLIC STRING URL {GET;SET;}
        @AURAENABLED PUBLIC STRING SCANSTATUS {GET;SET;}
        @AURAENABLED PUBLIC STRING SCANDATE {GET;SET;}
        @AURAENABLED PUBLIC STRING ISSUES {GET;SET;}
        @AURAENABLED PUBLIC STRING INSTANCEID {GET;SET;}
        @AURAENABLED PUBLIC BOOLEAN SCANFAILED {GET;SET;}        
        @AURAENABLED PUBLIC STRING SCANSTYLE {GET;SET;}
        }

    PRIVATE STATIC AURAHANDLEDEXCEPTION NEWEXCEPTION(STRING MESSAGE) {
        AURAHANDLEDEXCEPTION E = NEW AURAHANDLEDEXCEPTION(MESSAGE);
        E.SETMESSAGE(MESSAGE);
        RETURN E;
    }        
}