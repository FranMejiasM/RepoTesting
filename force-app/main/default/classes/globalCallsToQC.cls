/**
* @DESCRIPTION CLASS WHERE WE EXECUTE THE SCAN
*/
GLOBAL WITH SHARING CLASS GLOBALCALLSTOQC {
    GLOBAL GLOBALCALLSTOQC() {
        
    } 
    
    /**
* @DESCRIPTION DEPRECATED METHOD WHITOUT THE MANUAL VARIABLE
*/
    GLOBAL BOOLEAN EXECUTE_SCANN(INSTANCE__C INSTANCE, STRING GITBRANCH){
        RETURN NULL;
    } 
    
    /**
* @DESCRIPTION NEW EXECUTE SCAN METHOD WHIT THE MANUAL VARIABLE
*/
    GLOBAL STRING EXECUTE_SCANN(INSTANCE__C INSTANCE, STRING GITBRANCH, BOOLEAN MANUAL){
        
        STRING RESULT = 'FAILURE';
        
        LIST<SCANN__C> SCANLIST = [SELECT STATE__C, ID FROM SCANN__C WHERE STATE__C = 'RUNNING' AND BRANCH_NAME__C =: GITBRANCH AND INSTANCE__C =: INSTANCE.ID];
        IF(SCANLIST.SIZE() != 0){
            RESULT = 'DELAY';
        }ELSE{
            HTTPREQUEST REQUEST = REQUESTCOMMONS();
            QUALITYCLOUDSSETTINGS__MDT SETTINGS = CONTROLLERHELPERQC.GETSETTINGS();
            
            REQUEST.SETENDPOINT(REQUEST.GETENDPOINT() + '/API/'  + SETTINGS.API_VERSION__C + '/FEATURE-BRANCH-SCAN');
            REQUEST.SETMETHOD('POST');
            REQUEST.SETHEADER('CONTENT-TYPE', 'APPLICATION/VND.API+JSON');
            REQUEST.SETHEADER('ACCEPT', '*/*');
            
            //IF MANUAL IS DIFERENT THAN NULL SEND IT IN THE BODY
            IF(MANUAL != NULL){
                REQUEST.SETBODY('{"DATA": {"TYPE": "FEATURE-BRANCH-SCAN","ATTRIBUTES": {"URL-ID": ' + INSTANCE.ID__C + ',"SCAN-TYPE": 5,"FEATURE-BRANCH": "' + GITBRANCH + '", "MANUAL": ' + MANUAL + '}}}');
            }ELSE{
                REQUEST.SETBODY('{"DATA": {"TYPE": "FEATURE-BRANCH-SCAN","ATTRIBUTES": {"URL-ID": ' + INSTANCE.ID__C + ',"SCAN-TYPE": 5,"FEATURE-BRANCH": "' + GITBRANCH + '" }}}');
            }
            
        	HTTPRESPONSE RES = CONTROLLERHELPERQC.VALIDATEAPIKEY(REQUEST);
            
            IF (RES.GETSTATUSCODE() == 202){
                JSONTOSCAN.JSONTOSCAN_C JSON = JSONTOSCAN.JSONTOSCAN_C.PARSE(RES.GETBODY());
                STRING TXT_DATE = JSON.DATA.ATTRIBUTES.SCAN_DATE.REPLACE('T', ' ');
                SYSTEM.DEBUG('TXT_DATE: ' + TXT_DATE);
                DATETIME SCAN_DATE = CONTROLLERHELPERQC.STRINGTODATE(TXT_DATE);
                IF (SCHEMA.SOBJECTTYPE.SCANN__C.ISCREATEABLE()){
                    INSERT NEW SCANN__C(DATE__C = SCAN_DATE, STATE__C = JSON.DATA.ATTRIBUTES.STATUS, ID__C = JSON.DATA.ID, SCAN_TYPE__C = JSON.DATA.TYPE_Z, BRANCH_NAME__C = GITBRANCH, INSTANCE__C = INSTANCE.ID) ;
                    RESULT = 'SUCCESS';
                    
                }ELSE {
                    THROW NEW CONTROLLERHELPERQC.NOPERMISSIONEXCEPTION('CURRENT USER DOES NOT HAVE ENOUGH PERMISSIONS TO CREATE SCANN__C OBJECT.');
                }
            }
        }
        RETURN RESULT;
    }
    
    /**
* @DESCRIPTION PEER REVIEW METHOD GET
*/
    GLOBAL HTTPRESPONSE GETPEERREVIEW(STRING FEATURE, STRING INSTANCE) {
        
        HTTPRESPONSE RESPONSE = NEW HTTPRESPONSE(); 
        
        HTTPREQUEST REQUEST = REQUESTCOMMONS();
        REQUEST.SETMETHOD('GET');
        STRING ENCODEDFEATURE = ENCODINGUTIL.URLENCODE(FEATURE , 'UTF-8'); 
        REQUEST.SETENDPOINT(REQUEST.GETENDPOINT() + '/PEER-REVIEW/V1/FEATURE-BRANCH-REVIEW/?INCLUDE=PEERREVIEWELEMENT%2CPEERREVIEWELEMENT.PEERREVIEWRESOLUTION.RESOLUTIONSTATUS&FILTER=PEERREVIEWELEMENT.INSTANCEID%3D%3D'+INSTANCE+'%20AND%20FEATUREBRANCH%3D%3D'+ENCODEDFEATURE+'&PAGE%5BSIZE%5D=1&SORT=-ID');
        REQUEST.SETHEADER('ACCEPT', '*/*'); 
        
        RESPONSE = CONTROLLERHELPERQC.VALIDATEAPIKEY(REQUEST);
        
        RETURN RESPONSE;
    }
    
    /**
* @DESCRIPTION PEER REVIEW METHOD POST
*/
    GLOBAL HTTPRESPONSE CREATEPEERREVIEW(STRING FEATURE, STRING INSTANCE,STRING REASON, STRING DESCRIPTION) {
        
        HTTPRESPONSE RESPONSE = NEW HTTPRESPONSE(); 
        
        HTTPREQUEST REQUEST = REQUESTCOMMONS();
        // SET THE POST REQUEST METHOD 
        REQUEST.SETMETHOD('POST'); 
        REQUEST.SETENDPOINT(REQUEST.GETENDPOINT() + '/PEER-REVIEW/NEW-FEATURE-BRANCH-REVIEW'); 
        REQUEST.SETHEADER('CONTENT-TYPE', 'APPLICATION/JSON');
        REQUEST.SETBODY('{"DATA": {"TYPE": "FEATURE-BRANCH-REVIEW","ATTRIBUTES": {"FEATURE_BRANCH": "'+ FEATURE +'","INSTANCE_ID": '+ INSTANCE +',"EVENT": "QG_WORKFLOW","REASON": "'+ REASON +'","REQUEST_DESCRIPTION": "'+ DESCRIPTION +'"}}}');         
        
        RESPONSE = CONTROLLERHELPERQC.VALIDATEAPIKEY(REQUEST);
        
        RETURN RESPONSE;
    }
    
    /**
* @DESCRIPTION SET THE COMMON HEADERS FOR THE REQUEST
*/
    PUBLIC HTTPREQUEST REQUESTCOMMONS() {
        
        QUALITYCLOUDSSETTINGS__MDT SETTINGS = CONTROLLERHELPERQC.GETSETTINGS();
        HTTPREQUEST REQUEST = NEW HTTPREQUEST();
        REQUEST.SETHEADER('AUTHORIZATION', 'BEARER '+ CONTROLLERHELPERQC.GETAPIKEY());                
        REQUEST.SETHEADER('CLIENT-NAME', 'GENERICHTTPCLIENT');
        REQUEST.SETENDPOINT(SETTINGS.API_ENDPOINT__C);
        REQUEST.SETTIMEOUT(120000);
        
        RETURN REQUEST;
    }
    
    /**
* @DESCRIPTION UPDATE SCAN METHOD
*/
    GLOBAL BOOLEAN UPDATE_SCANNS(){        
        RETURN TRUE;
    }
}