/**
* @DESCRIPTION CONTROLLER CLASS OF THE INSTANCE VISUAL FORCE PAGE
*/
PUBLIC WITH SHARING CLASS INSTANCESCONTROLLER {
    PUBLIC STRING MESSAGE_TYPE_OUT{GET;SET;}
    PUBLIC STRING MESSAGE_OUT{GET;SET;}
    PUBLIC STRING MESSAGE{GET;SET;}
    PUBLIC STRING MESSAGE_TYPE{GET;SET;}
    
    LIST<INSTANCE__C> INSTANCES;
    QUALITYCLOUDSSETTINGS__MDT SETTINGS;
    PUBLIC STRING ID_INST{GET;SET;}
    PUBLIC BOOLEAN SHOWPOPUP {GET;SET;}
    PUBLIC STRING DESCRIPTION {GET;SET;}
    FINAL STATIC STRING ORG_URL = URL.GETSALESFORCEBASEURL().TOEXTERNALFORM();
    FINAL STATIC STRING ORG_ID =  USERINFO.GETORGANIZATIONID();
    FINAL STATIC STRING RS_NAME = 'THIS_ORG_TEMP_URL';
    FINAL STATIC STRING RS_DESCRIPTION = 'TEMPORARY REMOTE SETTING REQUIRED TO USE METADATA API FROM APEX'; 
    PUBLIC STRING APIKEY {GET;SET;}
    PUBLIC BOOLEAN SHOWSETUP { GET; SET; }
    
    /**
    * @DESCRIPTION GET AND SET QC_USER__C VARIABLE IN PAGE
    */
    PUBLIC STATIC QC_USER__C QCUSER { 
        GET {
            IF (QCUSER == NULL) {
                LIST<QC_USER__C> LISTQCUSER = [SELECT ID, NAME, USER__C, QC_ACTIVE__C, QC_API_KEY_DEVELOPER__C, QC_VALID_UNTIL__C ,API_KEY_1__C, API_KEY_2__C, API_KEY_3__C, API_KEY_4__C, API_KEY_5__C, API_KEY_6__C, API_KEY_7__C
                                                FROM QC_USER__C WHERE USER__C = :USERINFO.GETUSERID() LIMIT 1];
                IF(!LISTQCUSER.ISEMPTY()){
                    QCUSER = LISTQCUSER[0];
                }ELSE{
                    RETURN NULL;
                }
            }
            RETURN QCUSER;
        }
        SET;
    }
    
        /**
    * @DESCRIPTION GET AND SET CONNECTED VARIABLE IN PAGE
    */    
    PUBLIC STATIC BOOLEAN CONNECTED { 
        GET {
            CONNECTED = FALSE;
            IF (QCUSER != NULL) {
                IF(QCUSER.QC_VALID_UNTIL__C != NULL && DATE.TODAY() < QCUSER.QC_VALID_UNTIL__C && QCUSER.QC_ACTIVE__C){
                    CONNECTED = TRUE;
                }                
            }
            RETURN CONNECTED;
        }
        SET;
    }
    
    /**
    * @DESCRIPTION CONSTRUCTOR OF THE CLASS INITIZLIZE THE 
    */
    PUBLIC INSTANCESCONTROLLER() {
        MESSAGE = APEXPAGES.CURRENTPAGE().GETPARAMETERS().GET('MESSAGE');
        MESSAGE_TYPE = APEXPAGES.CURRENTPAGE().GETPARAMETERS().GET('MESSAGE_TYPE');
        SHOWPOPUP = FALSE;
        DESCRIPTION = '';
        SHOWSETUP = FALSE;
        
    }
        
    /**
    * @DESCRIPTION RETRIEVE THE INSTANCES OF QUALITYCLOUDS
    */
    PUBLIC LIST<INSTANCE__C> GETINSTANCES(){
        IF (!SCHEMA.SOBJECTTYPE.INSTANCE__C.ISACCESSIBLE()) {
            APEXPAGES.ADDMESSAGE(NEW APEXPAGES.MESSAGE(APEXPAGES.SEVERITY.ERROR, 'INSTANCE__C IS NOT ACCESSIBLE FOR CURRENT USER.'));
        } ELSE IF (INSTANCES == NULL) {
            INSTANCES = [SELECT URL__C, DESCRIPTION__C, ID__C, IS_FEATURED_BANCH__C FROM INSTANCE__C WHERE IS_FEATURED_BANCH__C = TRUE ORDER BY CREATEDDATE DESC LIMIT 100];            
        }   
        RETURN INSTANCES;
    }
    
    /**
    * @DESCRIPTION UPDATE THE INSTANCE BUTTON IN THE VISUALFORCE PAGE
    */
    PUBLIC PAGEREFERENCE UPDATEINSTANCES(){
        IF (!SCHEMA.SOBJECTTYPE.INSTANCE__C.ISUPDATEABLE() || !SCHEMA.SOBJECTTYPE.INSTANCE__C.ISCREATEABLE()) {
            APEXPAGES.ADDMESSAGE(NEW APEXPAGES.MESSAGE(APEXPAGES.SEVERITY.ERROR, 'CURRENT USER HAS NO CREATE/UPDATE PERMISSION FOR INSTANCE__C OBJECT.'));
            RETURN NULL;
        }
        HTTPREQUEST REQ = NEW HTTPREQUEST();
        SETTINGS = CONTROLLERHELPERQC.GETSETTINGS();
        REQ.SETENDPOINT(SETTINGS.API_ENDPOINT__C + '/API/'  + SETTINGS.API_VERSION__C + '/SALESFORCE-INSTANCE');
        REQ.SETMETHOD('GET');
        REQ.SETHEADER('ACCEPT', '*/*');
        REQ.SETHEADER('CLIENT-NAME', 'SALESFORCE');
        REQ.SETHEADER('AUTHORIZATION', 'BEARER '+ CONTROLLERHELPERQC.GETAPIKEY());                
        HTTP HTTP = NEW HTTP();
        HTTPRESPONSE RES = HTTP.SEND(REQ);
        IF (RES.GETSTATUSCODE() == 200){
            JSONINSTANCECONTENT.JSONINSTANCECONTENT_C RESULTS =  JSONINSTANCECONTENT.JSONINSTANCECONTENT_C.PARSE(RES.GETBODY());
            LIST<INSTANCE__C> FETCHED_INSTANCES = NEW LIST<INSTANCE__C>();
            FOR (JSONINSTANCECONTENT.DATA RESULT : RESULTS.DATA) {
                FETCHED_INSTANCES.ADD( NEW INSTANCE__C(URL__C=RESULT.ATTRIBUTES.URL, DESCRIPTION__C=RESULT.ATTRIBUTES.DESCRIPTION, ENVIRONMENT_TYPE__C=RESULT.ATTRIBUTES.ENVIRONMENT,ID__C=RESULT.ID, INSTANCE_TYPE__C=RESULT.ATTRIBUTES.SERVICE_NAME, IS_FEATURED_BANCH__C=RESULT.ATTRIBUTES.IS_FEATURE_BRANCH, INST_ORG_ID__C=RESULT.ATTRIBUTES.ORG_ID));
                SYSTEM.DEBUG(RESULT.ATTRIBUTES.URL+'-'+ RESULT.ATTRIBUTES.DESCRIPTION +'-'+ RESULT.ATTRIBUTES.ENVIRONMENT +'-'+ RESULT.ID +'-'+RESULT.ATTRIBUTES.SERVICE_NAME +'-'+RESULT.ATTRIBUTES.IS_FEATURE_BRANCH+'-'+RESULT.ATTRIBUTES.ORG_ID);
            }
            IF (FETCHED_INSTANCES?.ISEMPTY()){
                MESSAGE_TYPE_OUT = 'WARNING';
                MESSAGE_OUT = 'NO INSTANCES FOUND ON THE QUALITY CLOUDS PORTAL FOR THIS ACCOUNT.';                              
            } ELSE {
                UPSERT FETCHED_INSTANCES ID__C;
                MESSAGE_TYPE_OUT = 'CONFIRM';
                MESSAGE_OUT = 'INSTANCES ARE IMPORTED/UPDATED.';                
            }
        } ELSE {
            MESSAGE_TYPE_OUT = 'ERROR';
            MESSAGE_OUT = RES.GETBODY();
        }
        PAGEREFERENCE TEMPPAGE = NEW PAGEREFERENCE('/APEX/INSTANCES');
        TEMPPAGE.GETPARAMETERS().PUT('MESSAGE_TYPE', MESSAGE_TYPE_OUT);
        TEMPPAGE.GETPARAMETERS().PUT('MESSAGE', MESSAGE_OUT);
        TEMPPAGE.SETREDIRECT(TRUE);
        RETURN TEMPPAGE;
    }
    
    /**
    * @DESCRIPTION LINK TO THE INSTANCE DETAIL VISUALFORCE PAGE
    */
    PUBLIC PAGEREFERENCE OPENDETAIL(){
        PAGEREFERENCE TEMPPAGE = NEW PAGEREFERENCE('/APEX/INSTANCEDETAIL');
        TEMPPAGE.GETPARAMETERS().PUT('ID', ID_INST);
        TEMPPAGE.SETREDIRECT(TRUE);
        RETURN TEMPPAGE;
    } 
    
    /**
    * @DESCRIPTION CONNECTION TO PORTAL AND ADDING DESCRIPTION CONTROLLER
    */
    PUBLIC PAGEREFERENCE CONNECTORGTOPORTAL(){ 
        IF (STRING.ISBLANK(DESCRIPTION)) {
            APEXPAGES.ADDMESSAGE(NEW APEXPAGES.MESSAGE(APEXPAGES.SEVERITY.ERROR, 'PLEASE ENTER INSTANCE DESCRIPTION.'));            
            RETURN NULL;
        }
        
        TRY {        
            IF (CONNECTEDAPPSERVICE.CHECKIFNOQCCONNECTEDAPP()) {
                CONNECTEDAPPSERVICE.CREATEREMOTESITESETTING( RS_NAME, RS_DESCRIPTION, ORG_URL);
                MAP<STRING, STRING> KEYS = CONNECTEDAPPSERVICE.CREATECONNECTEDAPP(SETTINGS.CALLBACKURL__C);
                IF (!CREATEPORTALINSTANCE(KEYS)){
                    CONNECTEDAPPSERVICE.DELETECONNECTEDAPP('QUALITYCLOUDS');
                    CONNECTEDAPPSERVICE.DELETEREMOTESITESETTING(RS_NAME);
                    MESSAGE_TYPE_OUT = 'ERROR';
                    MESSAGE_OUT = 'ERROR CREATING INSTANCE IN THE PORTAL. QUALITYCLOUDS CONNECTED APP IS DELETED.';
                }ELSE {
                    CONNECTEDAPPSERVICE.DELETEREMOTESITESETTING(RS_NAME);
                    UPDATEINSTANCES();
                    PAGEREFERENCE TEMPPAGE = NEW PAGEREFERENCE('/APEX/INSTANCES');
                    TEMPPAGE.GETPARAMETERS().PUT('MESSAGE_TYPE', 'CONFIRM');
                    TEMPPAGE.GETPARAMETERS().PUT('MESSAGE', 'NEW INSTANCE "' + DESCRIPTION + '" CREATED ON THE PORTAL. PLEASE CLICK "REFRESH CONNECTION" TO AUTHORIZE THE INSTANCE.');
                    TEMPPAGE.SETREDIRECT(TRUE);
                    RETURN TEMPPAGE;
                }
            }ELSE{
                MESSAGE_TYPE_OUT = 'INFO';
                MESSAGE_OUT = 'QUALITYCLOUDS CONNECTED APP EXISTS. IF YOU NEED HELP WITH CONFIGURING THE APP, PLEASE CONTACT QUALITYCLOUDS SUPPORT.';
            }        
        } CATCH (EXCEPTION E) {
            SYSTEM.DEBUG(LOGGINGLEVEL.ERROR, E.GETSTACKTRACESTRING()); 
            MESSAGE_TYPE_OUT = 'ERROR';
            MESSAGE_OUT = E.GETMESSAGE();
        }
        PAGEREFERENCE TEMPPAGE = NEW PAGEREFERENCE('/APEX/INSTANCES');
        TEMPPAGE.GETPARAMETERS().PUT('MESSAGE_TYPE', MESSAGE_TYPE_OUT);
        TEMPPAGE.GETPARAMETERS().PUT('MESSAGE', MESSAGE_OUT);
        TEMPPAGE.SETREDIRECT(TRUE);
        RETURN TEMPPAGE;
    }    
    
    /**
    * @DESCRIPTION CANCEL BUTTON IN THE POPUP
    */
    PUBLIC PAGEREFERENCE CANCEL(){
        SHOWPOPUP = FALSE;
        RETURN NULL;
    }     
    
    /**
    * @DESCRIPTION CREATE A PORTAL INSTANCE WHIT A POST 19/06/2023 DEPRECATED
    */
    PUBLIC BOOLEAN CREATEPORTALINSTANCE(MAP<STRING, STRING> KEYS){
        RETURN TRUE;
    }
    
    /**
    * @DESCRIPTION RETRIEVE THE AUTHORIZATION
    */
    PUBLIC PAGEREFERENCE AUTHORIZE(){
        HTTPREQUEST REQ = NEW HTTPREQUEST();
        QUALITYCLOUDSSETTINGS__MDT SETTINGS = CONTROLLERHELPERQC.GETSETTINGS();
        REQ.SETENDPOINT(SETTINGS.API_ENDPOINT__C + '/API/'  + SETTINGS.API_VERSION__C + '/SALESFORCE-INSTANCE/' + ID_INST);
        SYSTEM.DEBUG('REQ.ENDPOINT'+ REQ.GETENDPOINT());
        REQ.SETMETHOD('GET');
        REQ.SETHEADER('ACCEPT', '*/*');
        REQ.SETHEADER('CLIENT-NAME', 'SALESFORCE');
        REQ.SETHEADER('AUTHORIZATION', 'BEARER '+ CONTROLLERHELPERQC.GETAPIKEY());                
        HTTP HTTP = NEW HTTP();
        HTTPRESPONSE RES = HTTP.SEND(REQ);
        STRING OAUTHURL;
        IF (RES.GETSTATUSCODE() == 200){
            MAP<STRING, OBJECT> RESULTS = (MAP<STRING, OBJECT>) JSON.DESERIALIZEUNTYPED(RES.GETBODY());
            MAP<STRING, OBJECT> DATA = (MAP<STRING, OBJECT>) RESULTS.GET('DATA');
            MAP<STRING, OBJECT> ATTRIBUTES = (MAP<STRING, OBJECT>) DATA.GET('ATTRIBUTES');
            OAUTHURL = (STRING) ATTRIBUTES.GET('SALESFORCE-LOGIN-URL');           
            PAGEREFERENCE TEMPPAGE = NEW PAGEREFERENCE(OAUTHURL?.REPLACEALL('&SCOPE=API%20REFRESH_TOKEN',''));   
            SYSTEM.DEBUG(OAUTHURL);
            SYSTEM.DEBUG(TEMPPAGE);
            TEMPPAGE.SETREDIRECT(TRUE);
            RETURN TEMPPAGE;            
        }
        MESSAGE_OUT = 'ERROR GETTING AUTHORIZATION URL. PLEASE CLOSE THIS TAB AND GET AUTHORIZATION TOKEN ON QUALITY CLOUDS PORTAL';    
        PAGEREFERENCE TEMPPAGE = NEW PAGEREFERENCE('/APEX/INSTANCES');
        TEMPPAGE.GETPARAMETERS().PUT('MESSAGE_TYPE', 'ERROR');
        TEMPPAGE.GETPARAMETERS().PUT('MESSAGE', MESSAGE_OUT);
                    SYSTEM.DEBUG(TEMPPAGE);
    
        TEMPPAGE.SETREDIRECT(TRUE);
        RETURN TEMPPAGE;
    }
    
        /**
    * @DESCRIPTION CONNECT TO QC BUTTON POPUP TO LOGIN CREDENTIALS
    */
    PUBLIC PAGEREFERENCE OPENPOPUP(){
        PAGEREFERENCE INSTUPDATERESULT =  UPDATEINSTANCES();
        IF (INSTUPDATERESULT.GETPARAMETERS().GET('MESSAGE_TYPE') == 'ERROR'){
            APEXPAGES.ADDMESSAGE(NEW APEXPAGES.MESSAGE(APEXPAGES.SEVERITY.ERROR, INSTUPDATERESULT.GETPARAMETERS().GET('MESSAGE'))); 
            RETURN NULL;
        }
        
        IF (CONNECTEDAPPSERVICE.CHECKIFNOQCCONNECTEDAPP()) {
            APEXPAGES.ADDMESSAGE(NEW APEXPAGES.MESSAGE(APEXPAGES.SEVERITY.ERROR, 'QUALITYCLOUDS CONNECTED APP EXISTS IN THIS ORG. IF YOU NEED HELP WITH CONFIGURING THE APP, PLEASE CONTACT QUALITYCLOUDS SUPPORT.')); 
            RETURN NULL;
        }
        
        IF (CONTROLLERHELPERQC.CHECKIFORGCONNECTED()) {
            APEXPAGES.ADDMESSAGE(NEW APEXPAGES.MESSAGE(APEXPAGES.SEVERITY.ERROR, 'THE INSTANCE FOR CURRENT ORG ID EXISTS ALREADY, BUT QUALITYCLOUDS CONNECTED APP NOT FOUND. IF YOU NEED HELP WITH CONFIGURING THE APP, PLEASE CONTACT QUALITYCLOUDS SUPPORT.')); 
            RETURN NULL;
        }
        
        SHOWPOPUP = TRUE;
        RETURN NULL;
    }
    
    /**
    * @DESCRIPTION THIS METHOD CHECKS IS THE CURRENT KEY IS VALID
    */
    PUBLIC BOOLEAN GETCHECKAPIKEY(){        
        RETURN CONTROLLERHELPERQC.CHECKAPIKEY(); 
    }
        
    /**
    * @DESCRIPTION SHOW API KEY SETUP MENU
    */
    PUBLIC VOID SETUP() {
        // TOGGLE THE SHOWOAUTHSTATUS VARIABLE BETWEEN TRUE AND FALSE
        SHOWSETUP = !SHOWSETUP;
    }
    
    /**
    * @DESCRIPTION ADD NEW API KEY FOR CONNECTION WHIT QC
    */
    PUBLIC PAGEREFERENCE ADDAPIKEY(){
        
        //SPLIT THE KEY
        LIST<STRING> CHUNKS = NEW LIST<STRING>();
        INTEGER CHUNKSIZE = 175;
        INTEGER NUMCHUNKS = (APIKEY.LENGTH() + CHUNKSIZE - 1) / CHUNKSIZE;
        
        FOR(INTEGER I = 0; I < NUMCHUNKS; I++){
            INTEGER STARTIDX = I * CHUNKSIZE;
            INTEGER ENDIDX = MATH.MIN((I + 1) * CHUNKSIZE, APIKEY.LENGTH());
            CHUNKS.ADD(APIKEY.SUBSTRING(STARTIDX, ENDIDX));
        }
        //CHECK IF ANY OTHER USER USES THE SAME API KEY
        IF(VALIDATEAPIKEY(CHUNKS)){
    
            HTTPRESPONSE RES = CONTROLLERHELPERQC.ACCESSAPIKEY(APIKEY);
            
            IF (RES != NULL && RES.GETSTATUSCODE() == 200){
                
                MAP<STRING, OBJECT> BODY = (MAP<STRING, OBJECT>) JSON.DESERIALIZEUNTYPED(RES.GETBODY());
                MAP<STRING, OBJECT> DATA = (MAP<STRING, OBJECT>)BODY.GET('DATA');
                MAP<STRING, OBJECT> ATTRIBUTES= (MAP<STRING, OBJECT>)DATA.GET('ATTRIBUTES');
                
                //SAVE DATA IN SALESFORCE USER
                LIST<QC_USER__C> USERLIST = [SELECT ID, NAME, USER__C, QC_ACTIVE__C, QC_API_KEY_DEVELOPER__C, QC_VALID_UNTIL__C ,API_KEY_1__C, API_KEY_2__C, API_KEY_3__C, API_KEY_4__C, API_KEY_5__C, API_KEY_6__C, API_KEY_7__C
                                                FROM QC_USER__C  WHERE USER__C =: USERINFO.GETUSERID() LIMIT 1]; 
                
                QC_USER__C LOGINUSER = NEW QC_USER__C();
                
                IF(!USERLIST.ISEMPTY()){
                    LOGINUSER = USERLIST[0];
                }ELSE{
                    LOGINUSER.USER__C = USERINFO.GETUSERID();
                    LOGINUSER.NAME = USERINFO.GETNAME();
                }
                
                IF(ATTRIBUTES.GET('VALID-UNTIL') != NULL){
                    LOGINUSER.QC_VALID_UNTIL__C = DATE.VALUEOF(ATTRIBUTES.GET('VALID-UNTIL')+' 00:00:00');
                }
                IF(ATTRIBUTES.GET('ACTIVE') != NULL){
                    LOGINUSER.QC_ACTIVE__C = BOOLEAN.VALUEOF(ATTRIBUTES.GET('ACTIVE'));
                }
                IF(ATTRIBUTES.GET('API-KEY-DEVELOPER') != NULL){
                    LOGINUSER.QC_API_KEY_DEVELOPER__C = ATTRIBUTES.GET('API-KEY-DEVELOPER').TOSTRING();
                }
                
                LOGINUSER.API_KEY_1__C = CHUNKS[0];
                LOGINUSER.API_KEY_2__C = CHUNKS[1];
                LOGINUSER.API_KEY_3__C = CHUNKS[2];
                LOGINUSER.API_KEY_4__C = CHUNKS[3];
                LOGINUSER.API_KEY_5__C = CHUNKS[4];
                LOGINUSER.API_KEY_6__C = CHUNKS[5];
                IF(CHUNKS.SIZE() > 6){
                    LOGINUSER.API_KEY_7__C = CHUNKS[6];
                }ELSE{
                    LOGINUSER.API_KEY_7__C = '';
                }           
    
                UPSERT LOGINUSER;
                MESSAGE_TYPE_OUT = 'CONFIRM';
                MESSAGE_OUT = 'CONNECTION WITH QUALITY CLOUDS ESTABLISHED';
                
            }ELSE{
                MESSAGE_TYPE_OUT = 'ERROR';
                MESSAGE_OUT = 'ERROR CONNECTING WITH QUALITY CLOUDS';
            }
        }ELSE{
            MESSAGE_TYPE_OUT = 'ERROR';
            MESSAGE_OUT = 'THIS API KEY IS ALREADY IN USE PLEASE GENERATE A NEW ONE';
        }
        
        PAGEREFERENCE TEMPPAGE = NEW PAGEREFERENCE('/APEX/INSTANCES');
        TEMPPAGE.GETPARAMETERS().PUT('MESSAGE_TYPE', MESSAGE_TYPE_OUT);
        TEMPPAGE.GETPARAMETERS().PUT('MESSAGE', MESSAGE_OUT);
        TEMPPAGE.SETREDIRECT(TRUE);
        RETURN TEMPPAGE;
    }
    
    /**
    * @DESCRIPTION VALIDATE THAT THE API KEY IS NOT BEING USED BY OTHER USERS
    */
    
    PUBLIC STATIC BOOLEAN VALIDATEAPIKEY(LIST<STRING> CHUNKS){
        
        BOOLEAN VALID = TRUE;
        
        LIST<QC_USER__C> USERLIST = [SELECT API_KEY_1__C, API_KEY_2__C, API_KEY_3__C, API_KEY_4__C, API_KEY_5__C, API_KEY_6__C, API_KEY_7__C
                                        FROM QC_USER__C];
        
        IF(!USERLIST.ISEMPTY()){
            FOR ( QC_USER__C QCUSER : USERLIST) {
                IF( QCUSER.API_KEY_1__C == CHUNKS[0]&& QCUSER.API_KEY_2__C == CHUNKS[1] && QCUSER.API_KEY_3__C == CHUNKS[2] && QCUSER.API_KEY_4__C == CHUNKS[3] & QCUSER.API_KEY_5__C == CHUNKS[4] & QCUSER.API_KEY_6__C == CHUNKS[5]){
                    IF(CHUNKS.SIZE() > 6){
                        IF( QCUSER.API_KEY_7__C == CHUNKS[6]){
                            VALID = FALSE;
                        }
                    }ELSE{
                        VALID = FALSE;
                    }
                }
            }
        }
        RETURN VALID;
    }    
    }