
PUBLIC WITH SHARING CLASS CONTROLLERHELPERQC {


    PUBLIC CLASS NOPERMISSIONEXCEPTION EXTENDS EXCEPTION {}
    
PUBLIC STATIC BOOLEAN CHECKIFORGCONNECTED(){
        STRING CURRENTORGID = USERINFO.GETORGANIZATIONID();
        INTEGER ORGINSTANCES = [SELECT COUNT() FROM INSTANCE__C WHERE INST_ORG_ID__C =: CURRENTORGID];
        RETURN (ORGINSTANCES > 0) ? TRUE : FALSE;         
    }
        

    PUBLIC STATIC QUALITYCLOUDSSETTINGS__MDT GETSETTINGS(){
        PERMISSIONCHECKER.EXCEPTIONIFNOTACCESSIBLE(QUALITYCLOUDSSETTINGS__MDT.GETSOBJECTTYPE());

        QUALITYCLOUDSSETTINGS__MDT  SETTINGS;        
        IF (SETTINGS == NULL ){
            TRY{                
                SETTINGS = QUALITYCLOUDSSETTINGS__MDT.GETINSTANCE('API_PROD');
            }CATCH (EXCEPTION E){
                SYSTEM.DEBUG(LOGGINGLEVEL.ERROR, E.GETSTACKTRACESTRING()); 
                SETTINGS = NEW QUALITYCLOUDSSETTINGS__MDT();                
            }
        }
        RETURN SETTINGS;
    }
    

    PUBLIC STATIC STRING GENERATERANDOMSTRING(INTEGER STRINGLENGTH, BOOLEAN ALLCAPS) {
        STRING CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';
        IF (ALLCAPS){
            CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
        }
        STRING RANDSTR = '';
        WHILE (RANDSTR.LENGTH() < STRINGLENGTH) {
            INTEGER IDX = MATH.MOD(MATH.ABS(CRYPTO.GETRANDOMINTEGER()), CHARS.LENGTH());
            RANDSTR += CHARS.SUBSTRING(IDX, IDX+1);
        }
        RETURN RANDSTR; 
    }
    

    PUBLIC STATIC BOOLEAN UPDATESCANNSPOLLING(INTEGER POLLSLEFT){
        BOOLEAN DONE = TRUE;
        LIST<SCANN__C> LSTSCANTOUPD = NEW  LIST<SCANN__C>();
        LIST<SCANN__C> LSTSCAN = [SELECT  STATE__C, ID__C, SCAN_TYPE__C, CREATEDDATE, ID, QUALITY_GATE_RESULT__C FROM SCANN__C WHERE STATE__C = 'RUNNING' ORDER BY CREATEDDATE ASC];
        LIST<QCISSUE__C> FETCHED_ISSUES = NEW LIST<QCISSUE__C>();
        LIST<TECH_DEVLOG__C> CALLOUTS = NEW LIST<TECH_DEVLOG__C>();
        
        IF (POLLSLEFT < 1) {            
            IF (SCHEMA.SOBJECTTYPE.SCANN__C.FIELDS.STATE__C.ISUPDATEABLE()){
                FOR(SCANN__C SCAN : LSTSCAN) {
                    SCAN.STATE__C = 'FAIL';                
                }
            }ELSE {
                THROW NEW NOPERMISSIONEXCEPTION('CURRENT USER DOES NOT HAVE ENOUGH PERMISSIONS TO UPDATE SCANN__C OBJECT OR ITS STATE__C FIELD.');
            }
            IF (SCHEMA.SOBJECTTYPE.SCANN__C.ISUPDATEABLE()) {
                UPDATE LSTSCAN;
            }ELSE {
                THROW NEW NOPERMISSIONEXCEPTION('CURRENT USER DOES NOT HAVE ENOUGH PERMISSIONS TO UPDATE SCANN__C OBJECT.');
            }
            RETURN DONE;
        }
        
        FOR(SCANN__C SCAN : LSTSCAN) {
            HTTPREQUEST REQ = NEW HTTPREQUEST();
            QUALITYCLOUDSSETTINGS__MDT SETTINGS = GETSETTINGS();
            IF (SCAN.SCAN_TYPE__C == 'FEATURE-BRANCH-SCAN') {
                REQ.SETENDPOINT(SETTINGS.API_ENDPOINT__C + '/API/'  + SETTINGS.API_VERSION__C + '/FEATURE-BRANCH-SCAN/' + SCAN.ID__C);
            } ELSE {
                REQ.SETENDPOINT(SETTINGS.API_ENDPOINT__C + '/API/'  + SETTINGS.API_VERSION__C + '/SCAN/' + SCAN.ID__C);
            }
            REQ.SETMETHOD('GET');
            REQ.SETHEADER('ACCEPT', '*/*');
            REQ.SETHEADER('CLIENT-NAME', 'GENERICHTTPCLIENT');
            REQ.SETHEADER('AUTHORIZATION', 'BEARER ' + GETAPIKEY());
            REQ.SETTIMEOUT(120000);
            HTTPRESPONSE RES = VALIDATEAPIKEY(REQ);
            IF (RES.GETSTATUSCODE() == 200){
                CALLOUTS.ADD(NEW TECH_DEVLOG__C(
                    CALLOUTACTION__C = 'SCAN UPDATE', 
                    CALLOUTREQUEST__C = REQ.GETBODY(), 
                    CALLOUTRESPONSE__C = 'STATUS CODE: ' + RES.GETSTATUSCODE() + '\N RESPONSEBODY\N' + RES.GETBODY()));
                JSONTOSCAN.JSONTOSCAN_C RESULT =  JSONTOSCAN.JSONTOSCAN_C.PARSE(RES.GETBODY());
                IF (SCHEMA.SOBJECTTYPE.SCANN__C.FIELDS.STATE__C.ISUPDATEABLE()){
                    SCAN.STATE__C = RESULT.DATA.ATTRIBUTES.STATUS;
                }
                IF (SCHEMA.SOBJECTTYPE.SCANN__C.FIELDS.CONFIGURATION_ELEMENTS__C.ISUPDATEABLE()){
                    SCAN.CONFIGURATION_ELEMENTS__C = RESULT.DATA.ATTRIBUTES.SCANNED_CONFIGURATION_ELEMENTS;
                }
                IF (SCHEMA.SOBJECTTYPE.SCANN__C.FIELDS.TECHNICAL_DEBT_HOURS__C.ISUPDATEABLE()){
                    SCAN.TECHNICAL_DEBT_HOURS__C = RESULT.DATA.ATTRIBUTES.TECHNICAL_DEBT;
                }
                IF (SCHEMA.SOBJECTTYPE.SCANN__C.FIELDS.QUALITY_OF_CLOUD__C.ISUPDATEABLE()){
                    SCAN.QUALITY_OF_CLOUD__C = RESULT.DATA.ATTRIBUTES.QUALITY_OF_CLOUD;
                }
                IF (SCHEMA.SOBJECTTYPE.SCANN__C.FIELDS.DURATION__C.ISUPDATEABLE()){
                    SCAN.DURATION__C = RESULT.DATA.ATTRIBUTES.PROCESS_TIME;
                }
                IF (SCHEMA.SOBJECTTYPE.SCANN__C.FIELDS.TOTAL_ISSUES__C.ISUPDATEABLE()){
                    SCAN.TOTAL_ISSUES__C = RESULT.DATA.ATTRIBUTES.NUMBER_OF_ISSUES;
                }
                IF (SCHEMA.SOBJECTTYPE.SCANN__C.FIELDS.QUALITY_GATE_RESULT__C.ISUPDATEABLE()){
                    SCAN.QUALITY_GATE_RESULT__C = RESULT.DATA.ATTRIBUTES.QUALITY_GATE_RESULT;
                    SYSTEM.DEBUG('RESULT.DATA.ATTRIBUTES.QUALITY_GATE_RESULT: ' + RESULT.DATA.ATTRIBUTES.QUALITY_GATE_RESULT);
                }
                IF (SCHEMA.SOBJECTTYPE.SCANN__C.FIELDS.QUALITY_GATE_MESSAGE__C.ISUPDATEABLE()){
                    SCAN.QUALITY_GATE_MESSAGE__C = RESULT.DATA.ATTRIBUTES.QUALITY_GATE_MESSAGE; 
                    SYSTEM.DEBUG(':RESULT.DATA.ATTRIBUTES.QUALITY_GATE_MESSAGE:' + RESULT.DATA.ATTRIBUTES.QUALITY_GATE_MESSAGE);
                }        
//TO DO: GET VALUE FROM JSON ATTRIBUTE WHEN DONE
                IF (SCHEMA.SOBJECTTYPE.SCANN__C.FIELDS.ALLOWCOMPLETIONONFAIL__C.ISUPDATEABLE()){
                    SCAN.ALLOWCOMPLETIONONFAIL__C = TRUE; 
                }  
//END-TO DO                         
                
                STRING MESSAGE_TYPE_OUT = 'CONFIRM';
                IF (RESULT.DATA.ATTRIBUTES.STATUS == 'SUCCESS') {
                    INTEGER PAGE = 1, TOTAL_PAGES = 1;

                    DO {
                        HTTPREQUEST REQ2 = NEW HTTPREQUEST();
                        IF (SCAN.SCAN_TYPE__C == 'FEATURE-BRANCH-SCAN') {
                            REQ2.SETENDPOINT(SETTINGS.API_ENDPOINT__C + '/API/'  + SETTINGS.API_VERSION__C + '/FEATURE-BRANCH-ISSUE?FILTER[SCAN_UUID]=' + SCAN.ID__C + '&PAGE[SIZE]=1000&PAGE[NUMBER]=' + PAGE);
                            REQ2.SETMETHOD('GET');
                            REQ2.SETHEADER('ACCEPT', '*/*');
                            REQ2.SETHEADER('CLIENT-NAME', 'GENERICHTTPCLIENT');
                            REQ2.SETHEADER('AUTHORIZATION', 'BEARER ' + GETAPIKEY());
                            REQ2.SETTIMEOUT(120000);
                            HTTPRESPONSE RES2 = CONTROLLERHELPERQC.VALIDATEAPIKEY(REQ2);
                            IF (RES2.GETSTATUSCODE() == 200){
                                
                                MAP<STRING, OBJECT> RESULTS = (MAP<STRING, OBJECT>) JSON.DESERIALIZEUNTYPED(RES2.GETBODY());
                                MAP<STRING, OBJECT> META_X = (MAP<STRING, OBJECT>) RESULTS.GET('META');
                                TOTAL_PAGES = (INTEGER) META_X.GET('LAST-PAGE');
                                LIST< OBJECT> DATA = (LIST<OBJECT>) RESULTS.GET('DATA');
                                FOR (OBJECT D : DATA) {                                        
                                    QCISSUE__C ISSUE = CONTROLLERHELPERQC.JSONDATATOISSUE((MAP<STRING,OBJECT>) D);
                                    ISSUE.SCAN__C = SCAN.ID; 
                                    FETCHED_ISSUES.ADD(ISSUE);
                                }                               
                                
                                MESSAGE_TYPE_OUT = 'CONFIRM';
                                
                            } ELSE {
                                MESSAGE_TYPE_OUT = 'ERROR';
                            }
                        } ELSE {
                            //REQ2.SETENDPOINT(SETTINGS.API_ENDPOINT__C + '/API/'  + SETTINGS.API_VERSION__C + '/ISSUE?FILTER[SCAN]=' + SCAN.ID__C + '&PAGE[SIZE]=1000&PAGE[NUMBER]=' + PAGE);
                        }
                    } WHILE (MESSAGE_TYPE_OUT != 'ERROR' && PAGE++ < TOTAL_PAGES);
                    
                    IF (SCHEMA.SOBJECTTYPE.SCANN__C.ISUPDATEABLE() && SCHEMA.SOBJECTTYPE.SCANN__C.ISACCESSIBLE() && SCAN.SCAN_TYPE__C == 'FEATURE-BRANCH-SCAN') {
                        SCAN.TOTAL_ISSUES__C = FETCHED_ISSUES.SIZE();
                    }                
                }
                IF (RESULT.DATA.ATTRIBUTES.STATUS == 'RUNNING'){
                    DONE = FALSE;
                }
                LSTSCANTOUPD.ADD(SCAN);
                
            }ELSE {
                DONE = FALSE;
            }    
        }

        IF (SCHEMA.SOBJECTTYPE.SCANN__C.ISUPDATEABLE()) {
            UPDATE LSTSCANTOUPD;
        }ELSE {
            THROW NEW NOPERMISSIONEXCEPTION('CURRENT USER DOES NOT HAVE ENOUGH PERMISSIONS TO UPDATE SCANN__C OBJECT.');
        }
        IF (CHECKIFUSERCANUPSERTQCISSUE()) {
            UPSERT FETCHED_ISSUES ID__C;
        } ELSE {
            THROW NEW NOPERMISSIONEXCEPTION('CURRENT USER DOES NOT HAVE ENOUGH PERMISSIONS TO CREATE/UPDATE QCISSUE__C OBJECT OR ITS FIELDS.');
        }
        IF(!CALLOUTS.ISEMPTY()) {
            INSERT CALLOUTS;
        }

        RETURN DONE;
    } 
    

    PUBLIC STATIC DATETIME STRINGTODATE(STRING DATESTR){
        IF (DATESTR != NULL) {
            INTEGER YEAR = INTEGER.VALUEOF(DATESTR.SUBSTRING(0, 4));   
            INTEGER MONTH = INTEGER.VALUEOF(DATESTR.SUBSTRING(5, 7));   
            INTEGER DAY = INTEGER.VALUEOF(DATESTR.SUBSTRING(8, 10));  
            INTEGER HOUR = INTEGER.VALUEOF(DATESTR.SUBSTRING(11, 13));
            INTEGER MINUTE = INTEGER.VALUEOF(DATESTR.SUBSTRING(14, 16));
            INTEGER SECOND = INTEGER.VALUEOF(DATESTR.SUBSTRING(17, 19));
            INTEGER OFFSET = 0;
            IF(DATESTR.CONTAINS('+') ){
                OFFSET = INTEGER.VALUEOF(DATESTR.SUBSTRINGAFTERLAST('+').SUBSTRINGBEFORELAST(':'));
                 HOUR -= OFFSET;
            } ELSE IF(DATESTR.LASTINDEXOF('-') == 19){ //NEGATIVE OFFSET
                OFFSET = INTEGER.VALUEOF(DATESTR.SUBSTRINGAFTERLAST('-').SUBSTRINGBEFORELAST(':'));
                 HOUR += OFFSET;
            } ELSE {
                DATETIME RIGTHNOW = DATETIME.NOW();
                IF(ISSUMMERTIME(RIGTHNOW)) {
                    HOUR -= 1;
                }            
            }             
            
            RETURN DATETIME.NEWINSTANCEGMT(YEAR, MONTH, DAY, HOUR, MINUTE, SECOND);
        }
        RETURN NULL;
    }


    PRIVATE STATIC BOOLEAN ISSUMMERTIME(DATETIME MYDATETIME) {
        RETURN LASTSUNDAYOF(3) <= MYDATETIME && MYDATETIME <= LASTSUNDAYOF(10);
    }


    PRIVATE STATIC DATETIME LASTSUNDAYOF(INTEGER MONTH) {
        IF(MONTH <1 || MONTH > 12){
            RETURN NULL;
        }
        TIME MYTIME = TIME.NEWINSTANCE(1, 0, 0, 0);
    
        BOOLEAN ISSUNDAY = FALSE;
        INTEGER DAY = DATE.DAYSINMONTH(SYSTEM.TODAY().YEAR(), MONTH);
        DATETIME DT;
        
        WHILE(!ISSUNDAY) {
            DT = DATETIME.NEWINSTANCEGMT(DATE.NEWINSTANCE(SYSTEM.TODAY().YEAR(), MONTH, DAY), MYTIME);
            IF(DT.FORMAT('EEEE') == 'SUNDAY')
            {
                ISSUNDAY=TRUE; 
            }
            DAY--;
        }
        RETURN DT;
    }

    PUBLIC STATIC QCISSUE__C JSONDATATOISSUE(MAP<STRING,OBJECT> DATA){
        MAP<STRING,OBJECT> ATTRIBUTES = (MAP<STRING,OBJECT>) DATA.GET('ATTRIBUTES');      

        QCISSUE__C ISSUE = NEW QCISSUE__C();
        ISSUE.CREATED_BY__C = (STRING) ATTRIBUTES.GET('CREATED-BY'); 
        ISSUE.UPDATED_ON__C = CONTROLLERHELPERQC.STRINGTODATE((STRING) ATTRIBUTES.GET('UPDATED-ON'));
        ISSUE.CREATED_ON__C = CONTROLLERHELPERQC.STRINGTODATE((STRING) ATTRIBUTES.GET('CREATED-ON'));
        ISSUE.UPDATED_BY__C =  (STRING) ATTRIBUTES.GET('UPDATED-BY'); 
        ISSUE.SEVERITY__C = (STRING) ATTRIBUTES.GET('SEVERITY'); 
        ISSUE.IMPACT_AREA__C = (STRING) ATTRIBUTES.GET('IMPACT-AREA'); 
        ISSUE.ISSUE__C = (STRING) ATTRIBUTES.GET('ISSUE-TYPE'); 
        ISSUE.LINE_NUMBER__C = (INTEGER) ATTRIBUTES.GET('LINE-NUMBER'); 
        ISSUE.LINK_TO_ELEMENT__C = (STRING) ATTRIBUTES.GET('AFFECTED-ELEMENT-SYS-ID');
        ISSUE.ELEMENT_NAME__C = (STRING) ATTRIBUTES.GET('AFFECTED-ELEMENT-NAME'); 
        ISSUE.ELEMENT_TYPE__C = (STRING) ATTRIBUTES.GET('CONFIGURATION-ELEMENT-TYPE'); 
        ISSUE.ID__C = (STRING) DATA.GET('ID'); 
        ISSUE.DOCUMENTATION__C = (STRING) ATTRIBUTES.GET('BEST-PRACTICE-LINK');
        ISSUE.BASELINE__C = (STRING) ATTRIBUTES.GET('REFERENCE-STATUS');
        
        //IC QAT-36 SHOW QUALITY GATES BREAKER IN THE QUALITY CLOUDS APP OF SALESFORCE
        IF(ATTRIBUTES.GET('QUALITY-GATE-BREAKER') != NULL && ATTRIBUTES.GET('QUALITY-GATE-BREAKER') != ''){
            ISSUE.QUALITY_GATE_BREAKER__C = (BOOLEAN) ATTRIBUTES.GET('QUALITY-GATE-BREAKER');
        }ELSE{
            ISSUE.QUALITY_GATE_BREAKER__C = FALSE;
        }
        
        MAP<STRING,OBJECT> WRITEOFFS = (MAP<STRING,OBJECT>) ATTRIBUTES.GET('WRITE-OFF');
        
        STRING WRITEOFFSTATUS = (STRING) WRITEOFFS?.GET('WRITE-OFF-STATUS');
        IF (WRITEOFFSTATUS == 'APPROVED') {
            ISSUE.WRITE_OFF__C = TRUE;
        } ELSE {
            ISSUE.WRITE_OFF__C = FALSE;
        }
        ISSUE.WRITE_OFF_REQUESTED_DATE__C = CONTROLLERHELPERQC.STRINGTODATE((STRING) WRITEOFFS?.GET('REQUESTED-DATE'));
        ISSUE.WRITE_OFF_REQUESTER__C = (STRING) WRITEOFFS?.GET('REQUESTER');
        ISSUE.WRITE_OFF_REQUEST_REASON__C = (STRING) WRITEOFFS?.GET('REQUEST-REASON-NAMEID');
        ISSUE.WRITE_OFF_REQUEST_DESCRIPTION__C = (STRING) WRITEOFFS?.GET('REQUEST-DESCRIPTION');
        ISSUE.WRITE_OFF_VALIDATION_DATE__C = CONTROLLERHELPERQC.STRINGTODATE((STRING) WRITEOFFS?.GET('VALIDATION-DATE'));
        ISSUE.WRITE_OFF_VALIDATOR__C = (STRING) WRITEOFFS?.GET('VALIDATOR');
        ISSUE.WRITE_OFF_VALIDATION_REASON__C = (STRING) WRITEOFFS?.GET('VALIDATION-REASON');
        ISSUE.WRITE_OFF_STATUS__C = (STRING) WRITEOFFS?.GET('WRITE-OFF-STATUS');        
        IF (ISSUE.WRITE_OFF_STATUS__C == 'APPROVED' || ISSUE.WRITE_OFF_STATUS__C == 'EXPIRED') { 
            ISSUE.WRITE_OFF_EXPIRATION_DATE__C = CONTROLLERHELPERQC.STRINGTODATE((STRING) WRITEOFFS?.GET('EXPIRATION-DATE'))?.DATE();
        }
        
        //IC QAT-37 NEW FUNCIONALITY TO SHOW THE TAGS ON THE ISSUES OF THE SCAN.
        MAP<STRING, MAP<STRING, OBJECT>> FULLRESPONSEMAP = NEW MAP<STRING, MAP<STRING, OBJECT>>();
        LIST<OBJECT> OBJECTLIST = (LIST<OBJECT>)ATTRIBUTES.GET('TAGS');   
        
        IF(OBJECTLIST != NULL ){
            FOR (INTEGER I = 0; I < OBJECTLIST.SIZE(); I++) {
                STRING JSONSTRING = JSON.SERIALIZE(OBJECTLIST[I]);
                MAP<STRING, OBJECT> OBJECTMAP = (MAP<STRING, OBJECT>)JSON.DESERIALIZEUNTYPED(JSONSTRING);
                IF (OBJECTMAP.GET('NAME') != NULL) {
                    IF(I == 0){
                        ISSUE.TAGSMULTIPICKLIST__C = OBJECTMAP.GET('NAME').TOSTRING();
                    }ELSE{
                        ISSUE.TAGSMULTIPICKLIST__C = ISSUE.TAGSMULTIPICKLIST__C + ';' + OBJECTMAP.GET('NAME').TOSTRING();
                    }
                }
            }   
        }
        
        
        RETURN ISSUE;
    }
    

    PUBLIC STATIC BOOLEAN CHECKIFUSERCANUPSERTQCISSUE (){
        IF (SCHEMA.SOBJECTTYPE.QCISSUE__C.FIELDS.SCAN__C.ISCREATEABLE() && SCHEMA.SOBJECTTYPE.QCISSUE__C.FIELDS.SCAN__C.ISUPDATEABLE() 
            && SCHEMA.SOBJECTTYPE.QCISSUE__C.FIELDS.CREATED_BY__C.ISCREATEABLE() 
            && SCHEMA.SOBJECTTYPE.QCISSUE__C.FIELDS.CREATED_BY__C.ISUPDATEABLE()  
            && SCHEMA.SOBJECTTYPE.QCISSUE__C.FIELDS.UPDATED_ON__C.ISCREATEABLE() && SCHEMA.SOBJECTTYPE.QCISSUE__C.FIELDS.UPDATED_ON__C.ISUPDATEABLE() 
            && SCHEMA.SOBJECTTYPE.QCISSUE__C.FIELDS.CREATED_ON__C.ISCREATEABLE() && SCHEMA.SOBJECTTYPE.QCISSUE__C.FIELDS.CREATED_ON__C.ISUPDATEABLE()
            && SCHEMA.SOBJECTTYPE.QCISSUE__C.FIELDS.UPDATED_BY__C.ISCREATEABLE() && SCHEMA.SOBJECTTYPE.QCISSUE__C.FIELDS.UPDATED_BY__C.ISUPDATEABLE()
            && SCHEMA.SOBJECTTYPE.QCISSUE__C.FIELDS.SEVERITY__C.ISCREATEABLE() && SCHEMA.SOBJECTTYPE.QCISSUE__C.FIELDS.SEVERITY__C.ISUPDATEABLE() 
            && SCHEMA.SOBJECTTYPE.QCISSUE__C.FIELDS.IMPACT_AREA__C.ISCREATEABLE() && SCHEMA.SOBJECTTYPE.QCISSUE__C.FIELDS.IMPACT_AREA__C.ISUPDATEABLE()
            && SCHEMA.SOBJECTTYPE.QCISSUE__C.FIELDS.ISSUE__C.ISCREATEABLE() && SCHEMA.SOBJECTTYPE.QCISSUE__C.FIELDS.ISSUE__C.ISUPDATEABLE() 
            && SCHEMA.SOBJECTTYPE.QCISSUE__C.FIELDS.LINE_NUMBER__C.ISCREATEABLE() && SCHEMA.SOBJECTTYPE.QCISSUE__C.FIELDS.LINE_NUMBER__C.ISUPDATEABLE() 
            && SCHEMA.SOBJECTTYPE.QCISSUE__C.FIELDS.LINK_TO_ELEMENT__C.ISCREATEABLE() && SCHEMA.SOBJECTTYPE.QCISSUE__C.FIELDS.LINK_TO_ELEMENT__C.ISUPDATEABLE() 
            && SCHEMA.SOBJECTTYPE.QCISSUE__C.FIELDS.ELEMENT_NAME__C.ISCREATEABLE() && SCHEMA.SOBJECTTYPE.QCISSUE__C.FIELDS.ELEMENT_NAME__C.ISUPDATEABLE() 
            && SCHEMA.SOBJECTTYPE.QCISSUE__C.FIELDS.ELEMENT_TYPE__C.ISCREATEABLE() && SCHEMA.SOBJECTTYPE.QCISSUE__C.FIELDS.ELEMENT_TYPE__C.ISUPDATEABLE() 
            && SCHEMA.SOBJECTTYPE.QCISSUE__C.FIELDS.ID__C.ISCREATEABLE() && SCHEMA.SOBJECTTYPE.QCISSUE__C.FIELDS.ID__C.ISUPDATEABLE()
            && SCHEMA.SOBJECTTYPE.QCISSUE__C.FIELDS.DOCUMENTATION__C.ISCREATEABLE() && SCHEMA.SOBJECTTYPE.QCISSUE__C.FIELDS.DOCUMENTATION__C.ISUPDATEABLE()
            && SCHEMA.SOBJECTTYPE.QCISSUE__C.FIELDS.BASELINE__C.ISCREATEABLE() && SCHEMA.SOBJECTTYPE.QCISSUE__C.FIELDS.BASELINE__C.ISUPDATEABLE()
            && SCHEMA.SOBJECTTYPE.QCISSUE__C.FIELDS.WRITE_OFF_REQUESTED_DATE__C.ISCREATEABLE() && SCHEMA.SOBJECTTYPE.QCISSUE__C.FIELDS.WRITE_OFF_REQUESTED_DATE__C.ISUPDATEABLE() 
            && SCHEMA.SOBJECTTYPE.QCISSUE__C.FIELDS.WRITE_OFF__C.ISCREATEABLE() && SCHEMA.SOBJECTTYPE.QCISSUE__C.FIELDS.WRITE_OFF__C.ISUPDATEABLE() 
            && SCHEMA.SOBJECTTYPE.QCISSUE__C.FIELDS.WRITE_OFF_REQUESTER__C.ISCREATEABLE() && SCHEMA.SOBJECTTYPE.QCISSUE__C.FIELDS.WRITE_OFF_REQUESTER__C.ISUPDATEABLE() 
            && SCHEMA.SOBJECTTYPE.QCISSUE__C.FIELDS.WRITE_OFF_REQUEST_REASON__C.ISCREATEABLE() && SCHEMA.SOBJECTTYPE.QCISSUE__C.FIELDS.WRITE_OFF_REQUEST_REASON__C.ISUPDATEABLE() 
            && SCHEMA.SOBJECTTYPE.QCISSUE__C.FIELDS.WRITE_OFF_REQUEST_DESCRIPTION__C.ISCREATEABLE() && SCHEMA.SOBJECTTYPE.QCISSUE__C.FIELDS.WRITE_OFF_REQUEST_DESCRIPTION__C.ISUPDATEABLE() 
            && SCHEMA.SOBJECTTYPE.QCISSUE__C.FIELDS.WRITE_OFF_VALIDATION_DATE__C.ISCREATEABLE() && SCHEMA.SOBJECTTYPE.QCISSUE__C.FIELDS.WRITE_OFF_VALIDATION_DATE__C.ISUPDATEABLE() 
            && SCHEMA.SOBJECTTYPE.QCISSUE__C.FIELDS.WRITE_OFF_VALIDATION_REASON__C.ISCREATEABLE() && SCHEMA.SOBJECTTYPE.QCISSUE__C.FIELDS.WRITE_OFF_VALIDATION_REASON__C.ISUPDATEABLE() 
            && SCHEMA.SOBJECTTYPE.QCISSUE__C.FIELDS.WRITE_OFF_VALIDATOR__C.ISCREATEABLE() && SCHEMA.SOBJECTTYPE.QCISSUE__C.FIELDS.WRITE_OFF_VALIDATOR__C.ISUPDATEABLE() 
            && SCHEMA.SOBJECTTYPE.QCISSUE__C.FIELDS.WRITE_OFF_STATUS__C.ISCREATEABLE() && SCHEMA.SOBJECTTYPE.QCISSUE__C.FIELDS.WRITE_OFF_STATUS__C.ISUPDATEABLE()
            && SCHEMA.SOBJECTTYPE.QCISSUE__C.FIELDS.QUALITY_GATE_BREAKER__C.ISCREATEABLE() && SCHEMA.SOBJECTTYPE.QCISSUE__C.FIELDS.QUALITY_GATE_BREAKER__C.ISUPDATEABLE()
            && SCHEMA.SOBJECTTYPE.QCISSUE__C.FIELDS.WRITE_OFF_EXPIRATION_DATE__C.ISCREATEABLE() && SCHEMA.SOBJECTTYPE.QCISSUE__C.FIELDS.WRITE_OFF_EXPIRATION_DATE__C.ISUPDATEABLE()
            && SCHEMA.SOBJECTTYPE.QCISSUE__C.FIELDS.TAGSMULTIPICKLIST__C.ISCREATEABLE() && SCHEMA.SOBJECTTYPE.QCISSUE__C.FIELDS.TAGSMULTIPICKLIST__C.ISUPDATEABLE()                       
            ) {
               RETURN TRUE;
           } ELSE {
               RETURN FALSE;
           }
    }
    

    PUBLIC STATIC HTTPRESPONSE ACCESSAPIKEY (STRING APIKEY){
        HTTPREQUEST REQ = NEW HTTPREQUEST();
        QUALITYCLOUDSSETTINGS__MDT SETTINGS = GETSETTINGS();
        REQ.SETENDPOINT(SETTINGS.API_ENDPOINT__C + '/API/' + SETTINGS.API_VERSION__C + '/USER/ME');
        REQ.SETMETHOD('GET');
        REQ.SETHEADER('ACCEPT', '*/*');
        REQ.SETHEADER('CONTENT-TYPE','APPLICATION/VND.API+JSON');
        REQ.SETHEADER('CLIENT-NAME', 'SALESFORCE');
        REQ.SETHEADER('AUTHORIZATION', 'BEARER '+ APIKEY);
        HTTPRESPONSE RES = VALIDATEAPIKEY(REQ);
        RETURN RES;
    }
    

    PUBLIC STATIC STRING GETAPIKEY(){
        
        LIST<QC_USER__C> USERLIST = [SELECT QC_ACTIVE__C, QC_VALID_UNTIL__C ,API_KEY_1__C, API_KEY_2__C, API_KEY_3__C, API_KEY_4__C, API_KEY_5__C, API_KEY_6__C, API_KEY_7__C
                                FROM QC_USER__C WHERE USER__C =: USERINFO.GETUSERID() LIMIT 1];
        
        STRING AUTHORIZATION = NULL;
        IF(USERLIST.SIZE() != 0 && USERLIST[0].API_KEY_1__C != NULL && USERLIST[0].QC_VALID_UNTIL__C > DATE.TODAY()){
            AUTHORIZATION = USERLIST[0].API_KEY_1__C + USERLIST[0].API_KEY_2__C + USERLIST[0].API_KEY_3__C + USERLIST[0].API_KEY_4__C + USERLIST[0].API_KEY_5__C + USERLIST[0].API_KEY_6__C + USERLIST[0].API_KEY_7__C;                
        }
        
        RETURN AUTHORIZATION;
    }
    

    PUBLIC STATIC HTTPRESPONSE VALIDATEAPIKEY (HTTPREQUEST REQUEST){
        HTTP HTTP = NEW HTTP();
        HTTPRESPONSE RESPONSE = NULL;
        
        INTEGER [] ERRORLIST400 = NEW INTEGER[]{400,401,402,403,404,405,406};
            INTEGER [] ERRORLIST500 = NEW INTEGER[]{500,501,502,503,504,505,506};
                
                TRY{
                    RESPONSE = HTTP.SEND(REQUEST);
                    IF(ERRORLIST400.CONTAINS(RESPONSE.GETSTATUSCODE()) && RESPONSE != NULL){
                        THROW NEW CALLOUTEXCEPTION('NOT AUTHORIZED PLEASE CHECK PERMISSIONS. IF PROBLEM PERSISTS, CONTACT QUALITY CLOUDS');
                    }ELSE IF(ERRORLIST500.CONTAINS(RESPONSE.GETSTATUSCODE()) && RESPONSE != NULL){
                        THROW NEW CALLOUTEXCEPTION('FAILED CONNECTION. IF PROBLEM PERSISTS, CONTACT QUALITY CLOUDS');
                    }
                }CATCH (EXCEPTION E){
                    SYSTEM.DEBUG('THE FOLLOWING EXCEPTION HAS OCCURRED: ' + E.GETMESSAGE() + E.GETCAUSE());  
                }
        
        RETURN RESPONSE;
    }
    

    PUBLIC STATIC BOOLEAN CHECKAPIKEY(){    
        LIST<QC_USER__C> USERLIST = [SELECT ID, NAME, USER__C, QC_ACTIVE__C, QC_API_KEY_DEVELOPER__C, QC_VALID_UNTIL__C ,API_KEY_1__C, API_KEY_2__C, API_KEY_3__C, API_KEY_4__C, API_KEY_5__C, API_KEY_6__C, API_KEY_7__C
                                FROM QC_USER__C WHERE USER__C =: USERINFO.GETUSERID() LIMIT 1];
        
        IF(USERLIST.SIZE() != 0 && USERLIST[0].QC_VALID_UNTIL__C != NULL && USERLIST[0].QC_VALID_UNTIL__C > DATE.TODAY() && USERLIST[0].QC_ACTIVE__C){
            RETURN TRUE;
        }
        RETURN FALSE;    
    }
}